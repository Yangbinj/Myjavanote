import java.util.*;
/*
	? 通配符。 也可以理解为占位符。
	泛型的限定：
			？ extends E:可以接受E类型或者E的子类型。上限。
			?  super E: 可以接受E类型或者E的父类型。 下限。	
*/
class GenericDemo6
{
	public static void main(String[] args){
				ArrayList<Person> a1 = new ArrayList<Person>();
				a1.add(new Person("abc1"));
				a1.add(new Person("abc2"));
				a1.add(new Person("abc3"));
				//printColl(a1);
				
				ArrayList<Student> al1 = new ArrayList<Student>();
				al1.add(new Student("abc...1"));
				al1.add(new Student("abc...2"));
				al1.add(new Student("abc...3"));
				printColl(al1);//ArrayList<Person> a1 = new ArrayList<Student>();
				
				
		/*
		ArrayList<String> a1 = new ArrayList<String>();
		a1.add("abc1");
		a1.add("abc2");
		a1.add("abc3");
		
		ArrayList<Integer> al1= new ArrayList<Integer>();
		al1.add(4);
		al1.add(7);
		al1.add(1);
		
		printColl(a1);
		printColl(al1);
		*/
	}
	public static void printColl(ArrayList<? extends Person> a1){
		Iterator<? extends Person> it = a1.iterator();
		while(it.hasNext()){
			System.out.println(it.next().getName());
			}
		}
	/*
	public static void printColl(ArrayList<?> a1){//ArrayList<String> a1 = new ArrayList<Integer>();error;
		Iterator<?> it = a1.iterator();
		while(it.hasNext()){
			System.out.println(it.next());
		}
	}
	/*
		public static <T> void printColl(ArrayList<T> a1){//ArrayList<String> a1 = new ArrayList<Integer>();error;
		Iterator<T> it = a1.iterator();
		while(it.hasNext()){
			System.out.println(it.next());
		}
	}
	*/
}
class Person
{
	private String name;
	Person(String name){
		this.name = name;
		}
	public String getName()
	{
		return name;
		}
}
class Student extends Person
{
		Student(String name){
			super(name);
			}
}
class Student implements Compareble<Person>{ //<? super E>
	public int compareTo(Person s){
		this.getName();
		}
	}
}
class Comp implements Comparator<Student>{
	public int compare(Student s1,Student s2){
		return s1.getName().compareTo(s2.getName());
		}	
}

TreeSet<Student> ts = new TreeSet<Student>(new Comp());
ts.add(new Student("abc1"));
ts.add(new Student("abc2"));
ts.add(new Student("abc3"));